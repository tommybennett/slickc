<profile name="/language/c/aliases">
	<p n="=surround_with_ihp">
		<text>
			%\cif (is_heap(begin(%\m sur_text%), end(%\m sur_text%))) {
			}
		</text>
	</p>
	<p n="aeq">
		<text>
			ASSERT_EQ(%\c, %\c);%\c
		</text>
	</p>
	<p n="afa">
		<text>
			ASSERT_FALSE(%\c)%\c
		</text>
	</p>
	<p n="=surround_with_const_cast">
		<text>
			const_cast&lt;%\c&gt;(%\m sur_text%)
		</text>
	</p>
	<p n="=surround_with_mme">
		<text>
			%\cauto minmax = minmax_element(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_include_once">
		<params>
			<param n="macro" default="" prompt="Symbol"/>
		</params>
		<text>
			#ifndef %(macro)
			#define %(macro)
			%\m sur_text%
			#endif // %(macro)
		</text>
	</p>
	<p n="=surround_with_ihu">
		<text>
			auto pos = is_heap_until(begin(%\m sur_text%), end(%\m sur_text%));
			   %\cif (pos != end(pos)) {
			   }
		</text>
	</p>
	<p n="=surround_with_#if">
		<text>
			%\m begin_line%#if %\c
			%\m sur_text%
			%\m begin_line%#endif
		</text>
	</p>
	<p n="=surround_with_if">
		<text>
			if (%\c) {%\c 
			%\m sur_text -ident%
			}
		</text>
	</p>
	<p n="=surround_with_eql">
		<text>
			%\cif (equal(begin(%\m sur_text%), end(%\m sur_text%), begin(%\m sur_text%))) {
			}
		</text>
	</p>
	<p n="=surround_with_acm">
		<text>
			auto sum = accumulate(begin(%\m sur_text%), end(%\m sur_text%), %\cinitial_value);
		</text>
	</p>
	<p n="=surround_with_ucp">
		<text>
			unique_copy(begin(%\m sur_text%), end(%\m sur_text%),
			            ostream_iterator&lt;string&gt;(cout, "\n"));
		</text>
	</p>
	<p n="=surround_with_ita">
		<text>
			iota(begin(%\m sur_text%),%\l end(%\m sur_text%), value);
		</text>
	</p>
	<p n="=surround_with_func">
		<text>
			//
			// %\cA function should know about and be responsible for one thing.
			//
			%\m sur_text -indent% {
			  // &lt;Invariant Preconditions&gt;
			%\l
			  // Exception safe, exception nuetral, no throw
			  // Basic Guarantee (no leaks)
			  // Strong Guarantee (consistent state)
			%\l
			  // Everything on this side that throws
			  // ---------------------------------------
			  // Cleanup and update state on this side
			%\l
			  // &lt;Invariant Postconditions&gt;
			}
		</text>
	</p>
	<p n="=surround_with_iss">
		<text>
			%\cif (is_sorted(begin(%\m sur_text%), end(%\m sur_text%))) {
			}
		</text>
	</p>
	<p n="=surround_with_rpc">
		<text>
			replace_copy(begin(%\m sur_text%),%\l end(%\m sur_text%), begin(%\m sur_text%), oldValue, newValue);
		</text>
	</p>
	<p n="=surround_with_isu">
		<text>
			auto pos = is_sorted_until(begin(%\m sur_text%), end(%\m sur_text%));
			   %\cif (pos != end(pos)) {
			   }
		</text>
	</p>
	<p n="=surround_with_rmv">
		<text>
			auto pos = remove(begin(%\m sur_text%),%\l end(%\m sur_text%), %\c);
			   if (pos != end(pos)) {
			   }
		</text>
	</p>
	<p n="=surround_with_nth">
		<text>
			nth_element(begin(%\m sur_text%), end(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_try...catch...finally">
		<text>
			try {
			%\m sur_text -indent%
			} catch (%\c) { %\S
			} finally {
			}
		</text>
	</p>
	<p n="=surround_with_rpi">
		<text>
			replace_if(begin(%\m sur_text%),%\l end(%\m sur_text%), binaryOp, value);
		</text>
	</p>
	<p n="=surround_with_rpl">
		<text>
			replace(begin(%\m sur_text%),%\l end(%\m sur_text%), oldValue, newValue);
		</text>
	</p>
	<p n="=surround_with_erm">
		<text>
			%\m sur_text -indent%.erase( remove( begin(%\m sur_text%), end(%\m sur_text%), %\c ), end(%\m sur_text%) );
		</text>
	</p>
	<p n="=surround_with_tfm">
		<text>
			transform(begin(%\m sur_text%),%\l end(%\m sur_text%), begin(%\m sur_text%), %\l [](const auto&amp; elem) {
			%\c%\i});
		</text>
	</p>
	<p n="=surround_with_fln">
		<text>
			fill_n(begin(%\m sur_text%), n, value);
		</text>
	</p>
	<p n="=surround_with_alo">
		<text>
			%\cif (all_of(begin(%\m sur_text%), end(%\m sur_text%), BinaryOp)) {
			}
		</text>
	</p>
	<p n="=surround_with_prp">
		<text>
			%\cif (prev_permutation(begin(%\m sur_text%), end(%\m sur_text%))) {
			}
		</text>
	</p>
	<p n="=surround_with_ltr">
		<text>
			%\m sur_text%.erase(0, %\m sur_text%.find_first_not_of(" \t\n\r"));
		</text>
	</p>
	<p n="=surround_with_upr">
		<text>
			transform(begin(%\m sur_text%),%\l end(%\m sur_text%), begin(%\m sur_text%),%\l [](char c) {
			return toupper(c); } );
		</text>
	</p>
	<p n="=surround_with_psc">
		<text>
			partial_sort_copy(begin(%\m sur_text%), end(%\m sur_text%),
			                  begin(dest), end(dest));
		</text>
	</p>
	<p n="=surround_with_braces">
		<text>
			{
			%\m sur_text -indent%
			}
		</text>
	</p>
	<p n="=surround_with_ppt">
		<text>
			auto pos = partition_point(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l [](const auto&amp; elem) {
			%\c});
			%\l
			if (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="=surround_with_cnt">
		<text>
			auto num = count(begin(%\m sur_text%), end(%\m sur_text%), %\c);
		</text>
	</p>
	<p n="=surround_with_default">
		<text>
			default:
			%\m sur_text -indent%
		</text>
	</p>
	<p n="te">
		<text>
			%\itemplate &lt;typename T&gt; %\c
		</text>
	</p>
	<p n="=surround_with_uqe">
		<text>
			%\cauto pos = unique(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_#ifndef">
		<text>
			%\m begin_line%#ifndef %\c
			%\m sur_text%
			%\m begin_line%#endif
		</text>
	</p>
	<p n="tf">
		<text>
			TEST_F(%\c, %\c) {
			%\i%\c
			}
		</text>
	</p>
	<p n="=surround_with_cpy">
		<text>
			copy(begin(%\m sur_text%), end(%\m sur_text%), begin(dest));
		</text>
	</p>
	<p n="=surround_with_finally">
		<text>
			finally {
			%\m sur_text -indent%
			}
		</text>
	</p>
	<p n="ti">
		<text>
			Times(%\c)%\c
		</text>
	</p>
	<p n="=surround_with_type_union">
		<text>
			typedef union %\c {
			%\m sur_text -indent%
			};
		</text>
	</p>
	<p n="=surround_with_cpb">
		<text>
			copy_backward(begin(%\m sur_text%), end(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_swr">
		<text>
			swap_ranges(begin(%\m sur_text%), end(%\m sur_text%), begin(dest%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_rtc">
		<text>
			rotate_copy(begin(%\m sur_text%), begin(new%\m sur_text%), end(%\m sur_text%), begin(dest%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_type_struct">
		<text>
			typedef struct %\c {
			%\m sur_text -indent%
			};
		</text>
	</p>
	<p n="ae">
		<text>
			ASSERT_EQ(%\c, %\c)%\c
		</text>
	</p>
	<p n="=surround_with_mxe">
		<text>
			%\cauto pos = max_element(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_rte">
		<text>
			rotate(begin(%\m sur_text%), begin(dest%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_#ifdef">
		<text>
			%\m begin_line%#ifdef %\c
			%\m sur_text%
			%\m begin_line%#endif
		</text>
	</p>
	<p n="=surround_with_catch">
		<text>
			catch (%\c) {
			%\m sur_text -indent%
			}
		</text>
	</p>
	<p n="=surround_with_pph">
		<text>
			push_heap(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_cni">
		<text>
			auto num = count_if(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l [](const auto&amp; elem) {
			%\c%\i});
		</text>
	</p>
	<p n="=surround_with_try...finally">
		<text>
			try {
			%\m sur_text -indent%
			} finally {
			%\i%\c
			}
		</text>
	</p>
	<p n="=surround_with_cpi">
		<text>
			copy_if(begin(%\m sur_text%),%\l end(%\m sur_text%), begin(dest), %\l [](const auto&amp; elem) {
			%\c%\i});
		</text>
	</p>
	<p n="=surround_with_union">
		<text>
			union {
			%\m sur_text -indent%
			} %\c;
		</text>
	</p>
	<p n="=surround_with_cpn">
		<text>
			copy_n(begin(%\m sur_text%), n, end(%\m sur_text%));
		</text>
	</p>
	<p n="us">
		<text>
			using namespace %\c
		</text>
	</p>
	<p n="=surround_with_static_cast">
		<text>
			static_cast&lt;%\c&gt;(%\m sur_text%)
		</text>
	</p>
	<p n="=surround_with_struct">
		<text>
			struct {
			%\m sur_text -indent%
			} %\c;
		</text>
	</p>
	<p n="test">
		<text>
			TEST(%\c,%\c) {
			%\i%\c
			}
		</text>
	</p>
	<p n="=surround_with_srt">
		<text>
			sort(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_spt">
		<text>
			auto pos = stable_partition(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l [](const auto&amp; elem) {
			%\c});
			%\l
			if (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="ve">
		<text>
			vector&lt;%\c&gt; %\c
		</text>
	</p>
	<p n="inline">
		<text>
			inline %\c
		</text>
	</p>
	<p n="=surround_with_new_c_file">
		<text>
			#include &lt;stdio.h&gt;
			%\S
			int main (int argc, char *argv[])
			{
			%\m sur_text -indent%
			%\ireturn(0);
			}
		</text>
	</p>
	<p n="ath">
		<text>
			ASSERT_THAT(%\c, %\c)%\c
		</text>
	</p>
	<p n="pimpl">
		<text>
			%\istruct impl;
			%\istd::unique_ptr&lt;impl&gt; pimpl;%\c
		</text>
	</p>
	<p n="=surround_with_msm">
		<text>
			auto values = mismatch(begin(%\m sur_text%), end(%\m sur_text%), begin(%\m sur_text%));
			%\cif (values.first == end(%\m sur_text%)) {
			} else {
			}
		</text>
	</p>
	<p n="atr">
		<text>
			ASSERT_TRUE(%\c)%\c
		</text>
	</p>
	<p n="=surround_with_mpb">
		<text>
			move_backward(begin(%\m sur_text%), end(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_ptc">
		<text>
			partition_copy(begin(%\m sur_text%), end(%\m sur_text%),
			                  begin(dest), end(dest));
		</text>
	</p>
	<p n="=surround_with_pst">
		<text>
			partial_sort(begin(%\m sur_text%), end(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_fnd">
		<text>
			auto pos = find(begin(%\m sur_text%), end(%\m sur_text%),%\l %\c);
			   if (pos != end(pos)) {
			   }
		</text>
	</p>
	<p n="=surround_with_mne">
		<text>
			%\cauto pos = min_element(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_fre">
		<text>
			for_each(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l [](const auto&amp; elem) {
			%\c%\i});
		</text>
	</p>
	<p n="=surround_with_fne">
		<text>
			auto pos = find_end(begin(%\m sur_text%),%\l end(%\m sur_text%),begin(sub%\m sur_text%),%\l end(sub%\m sur_text%));
			%\cif (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="=surround_with_mrg">
		<text>
			merge(begin(%\m sur_text%), end(%\m sur_text%),
			begin(sub%\m sur_text%2), end(sub%\m sur_text%2), begin(dest));
		</text>
	</p>
	<p n="=surround_with_switch">
		<text>
			switch (%\c) {
			%\m sur_text%
			}
		</text>
	</p>
	<p n="=surround_with_srh">
		<text>
			auto pos = search(begin(%\m sur_text%),%\l end(%\m sur_text%),begin(sub%\m sur_text%),%\l end(sub%\m sur_text%));
			%\cif (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="=surround_with_fni">
		<text>
			auto pos = find_if(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l [](const auto&amp; elem) {
			%\c});
			%\l
			if (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="p&gt;">
		<text>
			pimpl-&gt;
		</text>
	</p>
	<p n="=surround_with_ptn">
		<text>
			auto pos = partition(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l [](const auto&amp; elem) {
			%\c});
			%\l
			if (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="=surround_with_srn">
		<text>
			auto pos = search_n(begin(%\m sur_text%),%\l end(%\m sur_text%),count,value);
			%\cif (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="=surround_with_ano">
		<text>
			%\cif (any_of(begin(%\m sur_text%), end(%\m sur_text%), BinaryOp)) {
			}
		</text>
	</p>
	<p n="=surround_with_nxp">
		<text>
			%\cif (next_permutation(begin(%\m sur_text%), end(%\m sur_text%))) {
			}
		</text>
	</p>
	<p n="=surround_with_rvr">
		<text>
			reverse(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_rmc">
		<text>
			remove_copy(begin(%\m sur_text%),%\l end(%\m sur_text%), begin(%\m sur_text%), %\c);
		</text>
	</p>
	<p n="=surround_with_sts">
		<text>
			stable_sort(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_case">
		<text>
			case %\c:
			%\m sur_text -indent%
			break;
		</text>
	</p>
	<p n="=surround_with_do...while">
		<text>
			do {
			%\m sur_text -indent%
			} while (%\c);
		</text>
	</p>
	<p n="=surround_with_rmf">
		<text>
			remove_copy_if(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l begin(%\m sur_text%),%\l [](const auto&amp; elem) {
			%\c%\i});
		</text>
	</p>
	<p n="=surround_with_try...catch">
		<text>
			try {
			%\m sur_text -indent%
			} catch (%\c) { %\S
			}
		</text>
	</p>
	<p n="=surround_with_rci">
		<text>
			replace_copy_if(begin(%\m sur_text%),%\l end(%\m sur_text%), begin(%\m sur_text%), binaryOp, value);
		</text>
	</p>
	<p n="=surround_with_rmi">
		<text>
			auto pos = remove_if(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l [](const auto&amp; elem) {
			%\c});
			if (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="=surround_with_for">
		<text>
			for (%\c) {
			%\m sur_text -indent%
			}
		</text>
	</p>
	<p n="=surround_with_rvc">
		<text>
			reverse_copy(begin(%\m sur_text%), end(%\m sur_text%), begin(dest%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_dynamic_cast">
		<text>
			dynamic_cast&lt;%\c&gt;(%\m sur_text%)
		</text>
	</p>
	<p n="=surround_with_#if...else">
		<text>
			%\m begin_line%#if %\c
			%\m sur_text%
			%\m begin_line%#else
			%\m sur_text%
			%\m begin_line%#endif
		</text>
	</p>
	<p n="=surround_with_mov">
		<text>
			move(begin(%\m sur_text%), end(%\m sur_text%), begin(dest));
		</text>
	</p>
	<p n="=surround_with_sth">
		<text>
			sort_heap(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_phh">
		<text>
			push_heap(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_ffo">
		<text>
			auto pos = find_first_of(begin(%\m sur_text%),%\l end(%\m sur_text%),begin(sub%\m sur_text%),%\l end(sub%\m sur_text%));
			%\cif (pos != end(pos)) {
			}
		</text>
	</p>
	<p n="=surround_with_gnr">
		<text>
			generate(begin(%\m sur_text%),%\l end(%\m sur_text%), func);
		</text>
	</p>
	<p n="=surround_with_ipr">
		<text>
			%\cif (is_permutation(begin(%\m sur_text%), end(%\m sur_text%), begin(%\m sur_text%))) {
			}
		</text>
	</p>
	<p n="=surround_with_ipt">
		<text>
			%\cif (is_partitioned(begin(%\m sur_text%), end(%\m sur_text%), BinaryOp)) {
			}
		</text>
	</p>
	<p n="=surround_with_new_cpp_file">
		<text>
			#include &lt;iostream&gt;
			%\l
			using namespace std;
			%\l
			int main (int argc, char *argv[])
			{
			%\m sur_text -indent%
			%\ireturn(0);
			}
		</text>
	</p>
	<p n="=surround_with_while">
		<text>
			while (%\c) {
			%\m sur_text -indent%
			}
		</text>
	</p>
	<p n="=surround_with_mkh">
		<text>
			make_heap(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_try">
		<text>
			try {
			%\m sur_text -indent%
			}
		</text>
	</p>
	<p n="=surround_with_fil">
		<text>
			fill(begin(%\m sur_text%), end(%\m sur_text%), %\c);
		</text>
	</p>
	<p n="=surround_with_fin">
		<text>
			auto pos = find_if_not(begin(%\m sur_text%),%\l end(%\m sur_text%),%\l [](const auto&amp; elem)%\l {
			%\c%\i});
			%\l
			   if (pos != end(pos)) {
			   }
		</text>
	</p>
	<p n="=surround_with_lwr">
		<text>
			transform(begin(%\m sur_text%),%\l end(%\m sur_text%), begin(%\m sur_text%),%\l [](char c) {
			return tolower(c); } );
		</text>
	</p>
	<p n="=surround_with_lxc">
		<text>
			%\cif (lexigraphical_compare(begin(%\m sur_text%), end(%\m sur_text%), 
			begin(sub%\m sur_text%), end(sub%\m sur_text%)) {
			}
		</text>
	</p>
	<p n="=surround_with_if...else">
		<text>
			if (%\c) {
			%\m sur_text -indent%
			} else {
			%\m sur_text -indent%
			}
		</text>
	</p>
	<p n="=surround_with_shf">
		<text>
			random_shuffle(begin(%\m sur_text%), end(%\m sur_text%));
		</text>
	</p>
	<p n="=surround_with_ajf">
		<text>
			auto pos = adjacent_find(begin(%\m sur_text%), end(%\m sur_text%));
			   %\cif (pos != end(pos)) {
			   }
		</text>
	</p>
	<p n="=surround_with_trm">
		<text>
			%\m sur_text%.erase(%\m sur_text%.find_last_not_of(" \t\n\r") + 1);
		</text>
	</p>
	<p n="=surround_with_gnn">
		<text>
			generate_n(begin(%\m sur_text%), n, func);
		</text>
	</p>
	<p n="=surround_with_if_condition">
		<text>
			if (%\m sur_text -stripend ;%) {
			%\i%\c
			}
		</text>
	</p>
	<p n="=surround_with_nno">
		<text>
			%\cif (none_of(begin(%\m sur_text%), end(%\m sur_text%), BinaryOp)) {
			}
		</text>
	</p>
</profile>
